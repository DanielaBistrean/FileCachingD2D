//
// Generated file, do not edit! Created by nedtool 5.3 from nodes/messages/DataPacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __DATAPACKET_M_H
#define __DATAPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0503
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>nodes/messages/DataPacket.msg:18</tt> by nedtool.
 * <pre>
 * enum DataPacketType
 * {
 *     DP_ERROR = -1;
 *     DP_DATA = 0;
 *     DP_FEEDBACK = 1;
 *     DP_REQ = 2;
 *     DP_EOF = 3;
 *     DP_BROADCAST = 4;
 *     DP_CONFIRM = 5;
 * }
 * </pre>
 */
enum DataPacketType {
    DP_ERROR = -1,
    DP_DATA = 0,
    DP_FEEDBACK = 1,
    DP_REQ = 2,
    DP_EOF = 3,
    DP_BROADCAST = 4,
    DP_CONFIRM = 5
};

/**
 * Enum generated from <tt>nodes/messages/DataPacket.msg:29</tt> by nedtool.
 * <pre>
 * enum ErrorType
 * {
 *     DP_ERR_NOTFOUND = 0;
 *     DP_ERR_OUTOFRANGE = 1;
 *     DP_ERR_UNKNOWN = 2;
 * }
 * </pre>
 */
enum ErrorType {
    DP_ERR_NOTFOUND = 0,
    DP_ERR_OUTOFRANGE = 1,
    DP_ERR_UNKNOWN = 2
};

/**
 * Class generated from <tt>nodes/messages/DataPacket.msg:36</tt> by nedtool.
 * <pre>
 * packet ErrorDataPacket
 * {
 *     int fileId;
 *     int error \@enum(ErrorType);
 * }
 * </pre>
 */
class ErrorDataPacket : public ::omnetpp::cPacket
{
  protected:
    int fileId;
    int error;

  private:
    void copy(const ErrorDataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ErrorDataPacket&);

  public:
    ErrorDataPacket(const char *name=nullptr, short kind=0);
    ErrorDataPacket(const ErrorDataPacket& other);
    virtual ~ErrorDataPacket();
    ErrorDataPacket& operator=(const ErrorDataPacket& other);
    virtual ErrorDataPacket *dup() const override {return new ErrorDataPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getFileId() const;
    virtual void setFileId(int fileId);
    virtual int getError() const;
    virtual void setError(int error);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ErrorDataPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ErrorDataPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nodes/messages/DataPacket.msg:42</tt> by nedtool.
 * <pre>
 * packet FileDataPacket
 * {
 *     int fileId;
 *     int blockId;
 * }
 * </pre>
 */
class FileDataPacket : public ::omnetpp::cPacket
{
  protected:
    int fileId;
    int blockId;

  private:
    void copy(const FileDataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FileDataPacket&);

  public:
    FileDataPacket(const char *name=nullptr, short kind=0);
    FileDataPacket(const FileDataPacket& other);
    virtual ~FileDataPacket();
    FileDataPacket& operator=(const FileDataPacket& other);
    virtual FileDataPacket *dup() const override {return new FileDataPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getFileId() const;
    virtual void setFileId(int fileId);
    virtual int getBlockId() const;
    virtual void setBlockId(int blockId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FileDataPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FileDataPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nodes/messages/DataPacket.msg:48</tt> by nedtool.
 * <pre>
 * packet RequestDataPacket
 * {
 *     int fileId;
 *     int startBlockId;
 * }
 * </pre>
 */
class RequestDataPacket : public ::omnetpp::cPacket
{
  protected:
    int fileId;
    int startBlockId;

  private:
    void copy(const RequestDataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RequestDataPacket&);

  public:
    RequestDataPacket(const char *name=nullptr, short kind=0);
    RequestDataPacket(const RequestDataPacket& other);
    virtual ~RequestDataPacket();
    RequestDataPacket& operator=(const RequestDataPacket& other);
    virtual RequestDataPacket *dup() const override {return new RequestDataPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getFileId() const;
    virtual void setFileId(int fileId);
    virtual int getStartBlockId() const;
    virtual void setStartBlockId(int startBlockId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RequestDataPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RequestDataPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nodes/messages/DataPacket.msg:54</tt> by nedtool.
 * <pre>
 * packet ConfirmationDataPacket
 * {
 *     int fileId;
 *     int numBlocks;
 *     int startBlockId;
 * }
 * </pre>
 */
class ConfirmationDataPacket : public ::omnetpp::cPacket
{
  protected:
    int fileId;
    int numBlocks;
    int startBlockId;

  private:
    void copy(const ConfirmationDataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ConfirmationDataPacket&);

  public:
    ConfirmationDataPacket(const char *name=nullptr, short kind=0);
    ConfirmationDataPacket(const ConfirmationDataPacket& other);
    virtual ~ConfirmationDataPacket();
    ConfirmationDataPacket& operator=(const ConfirmationDataPacket& other);
    virtual ConfirmationDataPacket *dup() const override {return new ConfirmationDataPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getFileId() const;
    virtual void setFileId(int fileId);
    virtual int getNumBlocks() const;
    virtual void setNumBlocks(int numBlocks);
    virtual int getStartBlockId() const;
    virtual void setStartBlockId(int startBlockId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ConfirmationDataPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ConfirmationDataPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nodes/messages/DataPacket.msg:61</tt> by nedtool.
 * <pre>
 * packet FeedbackDataPacket
 * {
 *     int fileId;
 *     int blockId;
 *     bool ack;
 *     int nextBlockId;
 * }
 * </pre>
 */
class FeedbackDataPacket : public ::omnetpp::cPacket
{
  protected:
    int fileId;
    int blockId;
    bool ack;
    int nextBlockId;

  private:
    void copy(const FeedbackDataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FeedbackDataPacket&);

  public:
    FeedbackDataPacket(const char *name=nullptr, short kind=0);
    FeedbackDataPacket(const FeedbackDataPacket& other);
    virtual ~FeedbackDataPacket();
    FeedbackDataPacket& operator=(const FeedbackDataPacket& other);
    virtual FeedbackDataPacket *dup() const override {return new FeedbackDataPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getFileId() const;
    virtual void setFileId(int fileId);
    virtual int getBlockId() const;
    virtual void setBlockId(int blockId);
    virtual bool getAck() const;
    virtual void setAck(bool ack);
    virtual int getNextBlockId() const;
    virtual void setNextBlockId(int nextBlockId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FeedbackDataPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FeedbackDataPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nodes/messages/DataPacket.msg:69</tt> by nedtool.
 * <pre>
 * packet EOFDataPacket
 * {
 *     int fileId;
 * }
 * </pre>
 */
class EOFDataPacket : public ::omnetpp::cPacket
{
  protected:
    int fileId;

  private:
    void copy(const EOFDataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EOFDataPacket&);

  public:
    EOFDataPacket(const char *name=nullptr, short kind=0);
    EOFDataPacket(const EOFDataPacket& other);
    virtual ~EOFDataPacket();
    EOFDataPacket& operator=(const EOFDataPacket& other);
    virtual EOFDataPacket *dup() const override {return new EOFDataPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getFileId() const;
    virtual void setFileId(int fileId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EOFDataPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EOFDataPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nodes/messages/DataPacket.msg:74</tt> by nedtool.
 * <pre>
 * packet DataPacket
 * {
 *     int sourceId;
 *     int destinationId;
 *     int type \@enum(DataPacketType);
 * }
 * </pre>
 */
class DataPacket : public ::omnetpp::cPacket
{
  protected:
    int sourceId;
    int destinationId;
    int type;

  private:
    void copy(const DataPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataPacket&);

  public:
    DataPacket(const char *name=nullptr, short kind=0);
    DataPacket(const DataPacket& other);
    virtual ~DataPacket();
    DataPacket& operator=(const DataPacket& other);
    virtual DataPacket *dup() const override {return new DataPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSourceId() const;
    virtual void setSourceId(int sourceId);
    virtual int getDestinationId() const;
    virtual void setDestinationId(int destinationId);
    virtual int getType() const;
    virtual void setType(int type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DataPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DataPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __DATAPACKET_M_H

