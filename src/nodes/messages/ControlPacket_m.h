//
// Generated file, do not edit! Created by nedtool 5.3 from nodes/messages/ControlPacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __CONTROLPACKET_M_H
#define __CONTROLPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0503
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>nodes/messages/ControlPacket.msg:17</tt> by nedtool.
 * <pre>
 * enum ControlPacketType
 * {
 *     CP_BROADCAST = 0;
 *     CP_CONFIRM = 1;
 * }
 * </pre>
 */
enum ControlPacketType {
    CP_BROADCAST = 0,
    CP_CONFIRM = 1
};

/**
 * Class generated from <tt>nodes/messages/ControlPacket.msg:23</tt> by nedtool.
 * <pre>
 * packet ConfirmationControlPacket
 * {
 *     int fileId;
 *     int numBlocks;
 *     int startBlockId;
 * }
 * </pre>
 */
class ConfirmationControlPacket : public ::omnetpp::cPacket
{
  protected:
    int fileId;
    int numBlocks;
    int startBlockId;

  private:
    void copy(const ConfirmationControlPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ConfirmationControlPacket&);

  public:
    ConfirmationControlPacket(const char *name=nullptr, short kind=0);
    ConfirmationControlPacket(const ConfirmationControlPacket& other);
    virtual ~ConfirmationControlPacket();
    ConfirmationControlPacket& operator=(const ConfirmationControlPacket& other);
    virtual ConfirmationControlPacket *dup() const override {return new ConfirmationControlPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getFileId() const;
    virtual void setFileId(int fileId);
    virtual int getNumBlocks() const;
    virtual void setNumBlocks(int numBlocks);
    virtual int getStartBlockId() const;
    virtual void setStartBlockId(int startBlockId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ConfirmationControlPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ConfirmationControlPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nodes/messages/ControlPacket.msg:30</tt> by nedtool.
 * <pre>
 * packet BroadcastControlPacket
 * {
 *     int fileId;
 *     int startBlockId;
 * }
 * </pre>
 */
class BroadcastControlPacket : public ::omnetpp::cPacket
{
  protected:
    int fileId;
    int startBlockId;

  private:
    void copy(const BroadcastControlPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BroadcastControlPacket&);

  public:
    BroadcastControlPacket(const char *name=nullptr, short kind=0);
    BroadcastControlPacket(const BroadcastControlPacket& other);
    virtual ~BroadcastControlPacket();
    BroadcastControlPacket& operator=(const BroadcastControlPacket& other);
    virtual BroadcastControlPacket *dup() const override {return new BroadcastControlPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getFileId() const;
    virtual void setFileId(int fileId);
    virtual int getStartBlockId() const;
    virtual void setStartBlockId(int startBlockId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BroadcastControlPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BroadcastControlPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>nodes/messages/ControlPacket.msg:36</tt> by nedtool.
 * <pre>
 * packet ControlPacket
 * {
 *     int sourceId;
 *     int destinationId;
 *     int type \@enum(ControlPacketType);
 * }
 * </pre>
 */
class ControlPacket : public ::omnetpp::cPacket
{
  protected:
    int sourceId;
    int destinationId;
    int type;

  private:
    void copy(const ControlPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ControlPacket&);

  public:
    ControlPacket(const char *name=nullptr, short kind=0);
    ControlPacket(const ControlPacket& other);
    virtual ~ControlPacket();
    ControlPacket& operator=(const ControlPacket& other);
    virtual ControlPacket *dup() const override {return new ControlPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSourceId() const;
    virtual void setSourceId(int sourceId);
    virtual int getDestinationId() const;
    virtual void setDestinationId(int destinationId);
    virtual int getType() const;
    virtual void setType(int type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ControlPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ControlPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CONTROLPACKET_M_H

